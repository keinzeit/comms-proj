%% Scratch Script

%% Test Sampling and Detection, Reconstruction
% Conversion to Image
newZq3 = bitstream2blocks(HS_decidedSignal,qbits,R2,C2);
% Image Post-processing
newZ3 = ImagePostProcess_gray(newZq3,8,8,1,1,minZ,maxZ);
figure
imshow(newZ3)

%% Test stream2array,bi2de,reshape,and ImagePostP
HS_bitArray = stream2array(HS_decidedSignal,16);
HS_Zq = bi2de(HS_bitArray);
HS_Zq3D = reshape(HS_Zq,[8,8,1]);
ImagePostProcess_gray(HS_Zq3D,1,1,8,8,minZ,maxZ)

%% Test ImagePre,Bitstream conversion, Image Reconstruction
% This sections leaves out all the modulation, channel, matched filter,
% equalization, and sampling and detection portions. It only tests to see
% if the image is correctly reconstructed starting from the bitstream.
filename = 'file.jpeg';
qbits = 16;
[Ztres2,r2,c2,m2,n2,minval2,maxval2] = ImagePreProcess_gray(filename,qbits);
[bs2,R2,C2,N2] = blocks2bitStream(qbits,Ztres2);

ImagePostProcess_gray(Ztres2,r2,c2,m2,n2,minval2,maxval2);

%% Test ImagePre and PostProcess
filename = 'file.jpeg';
qbits = 16;
[Ztres2,r2,c2,m2,n2,minval2,maxval2] = ImagePreProcess_gray(filename,qbits);
[bs2,R2,C2,N2] = Convert_to_Bitstream(qbits,Ztres2);
ImagePostProcess_gray(Ztres2,r2,c2,m2,n2,minval2,maxval2);

%%%
% So, it will be important that the bitstream data gets placed back into
% the format necessary for the PostProcess function
%%%
% Try to convert to bitstream (which is a vector...?) then reconvert back
% to a vector of quantized numbers, then finally into the format required
% by ImagePostProcess. SKIP all the channel, MF, equalizer, and sampling
% parts when testing the bitstream to image reconstruction.

%% Set up sample image data (2D matrix)
blockdim = 4; % size of processing block
blockrows = 3; % blockrows*blockcols = number of blocks the image can fit
blockcols = 2;

numrows = blockrows*blockdim;
numcols = blockcols*blockdim;

% create sample data to be sent
A0 = magic(numrows); % because more rows than cols
A = A0(1:numrows,1:numcols)

%% Reshaping from 2D matrix to 3D matrix
% reshape the data to a 3D matrix
% for example, if image is size 12x8 and we use a block size of 4x4
% then the image fits (12/4)*(8/4) = 3*2 = 6 blocks
% thus the reshaped matrix will be size 4x4x6
% confirm this is correct by setting
%   blockdim = 4
%   blockrows = 3
%   blockcols = 2
A3D = reshape(A,[blockdim blockdim blockrows*blockcols])

%%%
% it seems that reshape takes elements columm-wise and places it into
% reshape column-wise as well. going from a 2D matrix to a 3D matrix, it
% will take elements from the 2D matrix and fill the first layer of the 3D
% matrix, then the second layer, then the third, and so on and so forth. 

%% Reshaping from 3D matrix to 2D matrix
Apost = reshape(A3D,[numrows, numcols])
diffA = Apost-A

%%%
% reshape also takes elements column-wise first. So it seems that reshape's
% convention is that it iterates in the order of the index, i.e. since
% indexing is based on the (row, column, depth) convention, it will take
% element (1,1,1), then (2,1,1), then (3,1,1) ... then (1,2,1), then
% (2,2,1), then (3,2,1), ... then (1,1,2), then (2,1,2), ... then (1,2,2),
% then (2,2,2)... until reshape has iterated through all elements in the
% source matrix.


% scaledZ = [0.960340316060574,0.0306263080106655,0.0304096757501550,0.0277973556699386,0.0279738931726802,0.0276523463499329,0.0272380544272874,0.0273528099187465,0.990721817060043,0.0187865437916917,0.0230072937908554,0.0250056233461867,0.0270642673942531,0.0286313642649970,0.0269566771463298,0.0274090950312366;
%            0,0.0190111950337569,0.0305327807392923,0.0276689187442581,0.0278434564599555,0.0286507620267802,0.0283294955861096,0.0273954475084651,0.0234513133031272,0.0229387589814476,0.0253246360577606,0.0266666058997566,0.0294908366838238,0.0267017629675961,0.0279859089731795,0.0279830013774416;
%            0.0190887972910312,0.0298736015731424,0.0247395959920363,0.0267138736079960,0.0257611966556556,0.0277259300984145,0.0282532454175774,0.0280395020465015,0.0270819223589835,0.0224760070664238,0.0261104991710461,0.0279638638047676,0.0267527656400945,0.0264906543661153,0.0270642673942531,0.0281225356286014;
%            0.0232790846521435,0.0293395837166907,0.0282660229533421,0.0265594920481593,0.0265709759041327,0.0268346828275433,0.0279970069753720,0.0282446726390454,0.0255926615843652,0.0292917794203728,0.0266469515865042,0.0258608457033471,0.0290918946583217,0.0273556613078912,0.0281550711927603,0.0277435462235214;
%            0.0261546416158259,0.0282614761360209,0.0268681154071513,0.0276973103290433,0.0277919680169948,0.0282418967633811,0.0277204449055677,0.0274388834526837,0.0274281177056239,0.0269197915754820,0.0254827176836106,0.0256734250194958,0.0290654441067929,0.0281648369165611,0.0277035523232864,0.0272038307296016;
%            0.0270996594669527,0.0269000572167517,0.0266435021977799,0.0277130951839286,0.0286739315136934,0.0290320176320020,0.0277890807553566,0.0271435528257276,0.0268731554953609,0.0273258277654539,0.0268235881674923,0.0289305608649762,0.0276796716140111,0.0278101985076623,0.0277475505188408,0.0272152468410112;
%            0.0270044565842613,0.0266095058275427,0.0282532454175774,0.0284810450275021,0.0283758600344332,0.0278469458224424,0.0275696872396154,0.0276619888589197,0.0258596538404310,0.0280809788637889,0.0281558183283657,0.0266103024957384,0.0293435392999064,0.0270215609661799,0.0276541853060892,0.0280794268653834;
%            0.0280734943143758,0.0275461592421086,0.0266576955903845,0.0269461030299473,0.0278353698343534,0.0281081249224507,0.0275437669921322,0.0278327598811599,0.0275631933281351,0.0284663500004141,0.0273770099705896,0.0269563522206754,0.0274661042602864,0.0275450182561419,0.0276346142419097,0.0276449129594755;
%            1,0.0227469802596761,0.0206253793600772,0.0275565002337816,0.0270642673942531,0.0275477219879121,0.0283371271470722,0.0274071803104728,0.991449517682784,0.0294357654739784,0.0274996408170510,0.0282521217147400,0.0292473692624783,0.0270279235419795,0.0268681154071513,0.0279029606514773;
%            0.0199559753999872,0.0364781949822078,0.0340077597507243,0.0308702403601676,0.0281090969110836,0.0273185224602799,0.0260056726947956,0.0275148193326753,0.0402998176479191,0.0201722717025365,0.0262582110962729,0.0269060610536768,0.0263207533739992,0.0268141023751610,0.0259347722614359,0.0269331400123188;
%            0.0239292430322831,0.0291427432273351,0.0226722056123267,0.0257056212773843,0.0263638846237912,0.0268602512951768,0.0277919680169948,0.0280153019946584,0.0197034301186496,0.0241781971220458,0.0292915117072582,0.0271851643815580,0.0266880936198817,0.0273016239090955,0.0283818859288310,0.0270485830127713;
%            0.0294974405151531,0.0271781419882907,0.0274568802323247,0.0283043984523034,0.0258418878488511,0.0269394492168196,0.0272501184443751,0.0276428423467734,0.0288346159277141,0.0270221992217457,0.0253411867233651,0.0271907276874718,0.0293126913717191,0.0274362298097122,0.0267566661460005,0.0274241400649357;
%            0.0285196686397366,0.0298612162441622,0.0280446539016582,0.0299175654016260,0.0281558183283657,0.0269748801157723,0.0272331067044889,0.0280485077823429,0.0259727164601404,0.0276828933314458,0.0299750647098062,0.0269042810342669,0.0254269409930841,0.0277120115293673,0.0276149905841078,0.0273237961773005;
%            0.0274146451113932,0.0261659845751416,0.0269012696576766,0.0256659731270215,0.0262473399925996,0.0282257321587217,0.0276207419135856,0.0273288537219342,0.0302019970248226,0.0269487467233398,0.0246891891094969,0.0275869415433557,0.0275177740064458,0.0270078075912898,0.0276707922051924,0.0280825367338164;
%            0.0277562794840163,0.0282229729222251,0.0274281177056239,0.0281233295046803,0.0279293041346015,0.0276671346762875,0.0278178260624705,0.0273476414580611,0.0275375248093856,0.0277425852204945,0.0283818859288310,0.0284323347842453,0.0268104405236229,0.0282186874829955,0.0277478255722150,0.0273438607143423;
%            0.0269513507251941,0.0287882954224734,0.0283685186251973,0.0270231509059536,0.0286049323556317,0.0279152954244207,0.0275038648165679,0.0272558042590186,0.0277030618872238,0.0278115523687040,0.0272615513664493,0.0284371967694997,0.0270978569400616,0.0281171102993910,0.0270674269064021,0.0273369569910382];
% imshow(scaledZ)

